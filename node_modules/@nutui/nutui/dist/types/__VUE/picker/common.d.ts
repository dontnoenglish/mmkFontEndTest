import { CSSProperties } from 'vue';
export declare const componentWeb: {
    components: {
        [x: number]: any;
    };
    props: {
        modelValue: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => never[];
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        cancelText: {
            type: StringConstructor;
            default: string;
        };
        okText: {
            type: StringConstructor;
            default: string;
        };
        columns: {
            type: import("vue").PropType<(import("./types").PickerOption | import("./types").PickerOption[])[]>;
            default: () => never[];
        };
        threeDimensional: {
            type: BooleanConstructor;
            default: boolean;
        };
        swipeDuration: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        showToolbar: {
            type: BooleanConstructor;
            default: boolean;
        };
        visibleOptionNum: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        optionHeight: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
    };
    emits: string[];
    setup(props: any, { emit }: any): {
        column: any;
        columnsType: import("vue").ComputedRef<"multiple" | "single" | "cascade">;
        columnsList: import("vue").ComputedRef<import("./types").PickerOption[][]>;
        cancel: () => void;
        changeHandler: (columnIndex: number, option: import("./types").PickerOption) => void;
        confirmHandler: () => void;
        defaultValues: import("vue").Ref<(string | number)[]>;
        pickerColumn: import("vue").Ref<any[]>;
        swipeRef: (el: any) => void;
        translate: (keyPath: string, ...args: unknown[]) => string;
        columnStyle: import("vue").ComputedRef<CSSProperties>;
        ENV: import("vue").Ref<TaroGeneral.ENV_TYPE>;
        ENV_TYPE: import("vue").Ref<{
            WEAPP: TaroGeneral.ENV_TYPE.WEAPP;
            WEB: TaroGeneral.ENV_TYPE.WEB;
            RN: TaroGeneral.ENV_TYPE.RN;
            SWAN: TaroGeneral.ENV_TYPE.SWAN;
            ALIPAY: TaroGeneral.ENV_TYPE.ALIPAY;
            TT: TaroGeneral.ENV_TYPE.TT;
            QQ: TaroGeneral.ENV_TYPE.QQ;
            JD: TaroGeneral.ENV_TYPE.JD;
        }>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
    };
};
export declare const componentWeapp: {
    components: {
        [x: number]: any;
    };
    props: {
        modelValue: {
            type: import("vue").PropType<(string | number)[]>;
            default: () => never[];
        };
        title: {
            type: StringConstructor;
            default: string;
        };
        cancelText: {
            type: StringConstructor;
            default: string;
        };
        okText: {
            type: StringConstructor;
            default: string;
        };
        columns: {
            type: import("vue").PropType<(import("./types").PickerOption | import("./types").PickerOption[])[]>;
            default: () => never[];
        };
        threeDimensional: {
            type: BooleanConstructor;
            default: boolean;
        };
        swipeDuration: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        showToolbar: {
            type: BooleanConstructor;
            default: boolean;
        };
        visibleOptionNum: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        optionHeight: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
    };
    emits: string[];
    setup(props: any, { emit }: any): {
        column: any;
        columnsType: import("vue").ComputedRef<"multiple" | "single" | "cascade">;
        columnsList: import("vue").ComputedRef<import("./types").PickerOption[][]>;
        cancel: () => void;
        changeHandler: (columnIndex: number, option: import("./types").PickerOption) => void;
        confirmHandler: () => void;
        defaultValues: import("vue").Ref<(string | number)[]>;
        defaultIndexes: import("vue").Ref<number[]>;
        tileChange: (data: any) => void;
        handlePickstart: () => void;
        translate: (keyPath: string, ...args: unknown[]) => string;
        handlePickend: () => void;
        pickerViewStyles: import("vue").ComputedRef<CSSProperties>;
        pxCheck: (value: string | number) => string;
        show: import("vue").Ref<boolean>;
        picking: import("vue").Ref<boolean>;
        ENV: import("vue").Ref<TaroGeneral.ENV_TYPE>;
        ENV_TYPE: import("vue").Ref<{
            WEAPP: TaroGeneral.ENV_TYPE.WEAPP;
            WEB: TaroGeneral.ENV_TYPE.WEB;
            RN: TaroGeneral.ENV_TYPE.RN;
            SWAN: TaroGeneral.ENV_TYPE.SWAN;
            ALIPAY: TaroGeneral.ENV_TYPE.ALIPAY;
            TT: TaroGeneral.ENV_TYPE.TT;
            QQ: TaroGeneral.ENV_TYPE.QQ;
            JD: TaroGeneral.ENV_TYPE.JD;
        }>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
    };
};
